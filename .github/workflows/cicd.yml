name: CICD Pipeline for AKS & ACR

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn compile

  security-check:
    runs-on: self-hosted
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Trivy Installation
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy
      - name: Trivy FS Scan
        run: trivy fs --format table -o fs-report.json .
      - name: Gitleaks Installation
        run: sudo apt install gitleaks -y
      - name: Gitleaks Code Scan
        run: gitleaks detect source . -r gitleaks-report.json -f json

  test:
    runs-on: self-hosted
    needs: security-check
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Unit Test Cases
        run: mvn test

  build_project_and_sonar_scan:
    runs-on: self-hosted
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build Project
        run: mvn package
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar


  build_and_push_docker:
    runs-on: self-hosted
    needs: build_project_and_sonar_scan
    steps:
      - uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app
      - name: Build & Push Docker image to ACR
        env:
          ACR_NAME: bankapp12
          IMAGE_NAME: bankapp
        run: |
          # 1️⃣ Get short commit SHA for tagging
          IMAGE_TAG=$(git rev-parse --short HEAD)
          
          # 2️⃣ Build Docker image
          docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG ./app
          
          # 3️⃣ Login to ACR (using GitHub OIDC & AKS managed identity)
          az login --identity --allow-no-subscriptions || echo "OIDC login works in GitHub Actions"
          az acr login --name $ACR_NAME
          
          # 4️⃣ Push image
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
          echo "Docker image pushed: $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG"

  deploy_to_aks:
    runs-on: self-hosted
    needs: build_and_push_docker
    steps:
      - uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group SRINIVASA --name aks-cluster --overwrite-existing
      - name: Deploy to AKS
        env:
          ACR_NAME: bankapp12
          IMAGE_NAME: bankapp
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          # Update deployment image
          kubectl set image deployment/bankapp bankapp=$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
          # Wait for rollout
          kubectl rollout status deployment/bankapp
